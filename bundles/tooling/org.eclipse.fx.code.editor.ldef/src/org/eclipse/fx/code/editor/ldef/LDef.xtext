grammar org.eclipse.fx.code.editor.ldef.LDef with org.eclipse.xtext.common.Terminals

generate lDef "http://www.eclipse.org/fx/code/editor/ldef/LDef"

Root:
	'package' name=QualifiedName
	imports+=Import*
	languageDefinition=LanguageDef
;

ValidID:
	ID;

QualifiedName:
  ValidID (=>'.' ValidID)*;

QualifiedNameWithWildCard :
	QualifiedName  ('.' '*')?;

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;

LanguageDef:
	name=ID '{'
		paritioning=Paritioning
		lexicalHighlighting=LexicalHighlighting
		integration=Integration?
	'}'
;

Integration:
	'integration' '{'
		codeIntegrationList+=CodeIntegration+
	'}'
;

CodeIntegration:
	JavaFXIntegration // | SWTIntegration
;

JavaFXIntegration:
	'javafx' '{'
		codegenerationList += Codegeneration+
	'}'
;

Codegeneration:
	JavaCodeGeneration | E4CodeGeneration
;

JavaCodeGeneration:
	'java' name=STRING ('{'
		configValue+=ConfigValue+
	'}')?
;

E4CodeGeneration:
	'e4' name=STRING ('{'
		configValue+=ConfigValue+
	'}')?
;

ConfigValue:
	key=ID ':' ( simpleValue=STRING | ('{'
		children+=ConfigValue+
		'}'
	) )
;


//SWTIntegration:
//	'swt' '{'
//		{SWTIntegration}
//		codegen?='codegeneration'?
//		e4?='e4'?
//	'}'
//;

Paritioning:
	'partitioning' '{'
		partitions += Partition+
		partitioner = Partitioner
	'}'
;

Partition:
	'partition' name=ID
;

Partitioner:
	Partitioner_Rule | Paritioner_JS
;

Paritioner_JS:
	'script' scriptURI=STRING
;

Partitioner_Rule:
	'rule' '{'
		ruleList+=Partition_Rule+
	'}'
;

Partition_Rule:
	Partition_SingleLineRule | Partition_MultiLineRule | Partition_JSRule
;

Partition_SingleLineRule:
	'single_line' parition=[Partition|ID] startSeq=STRING ( 'pattern' startPattern=STRING startSuffix=STRING )? ( 'col' check=Check )? ('=>' endSeq=STRING?)? ('escaped' 'by' escapeSeq=STRING)?
;

Partition_MultiLineRule:
	'multi_line' parition=[Partition|ID] startSeq=STRING ( 'pattern' startPattern=STRING startSuffix=STRING )? ( 'col' check=Check )? '=>' endSeq=STRING ('escaped' 'by' escapeSeq=STRING)?
;

Partition_JSRule:
	'script' parition=[Partition|ID] fileURI=STRING ( 'col' check=Check )?
;

// -----------------------------------------------------

LexicalHighlighting:
	'lexical_highlighting' '{'
		list += LexicalPartitionHighlighting+
		(vistual = TokenVisuals)?
	'}'
;

TokenVisuals:
	'token_def' '{'
		(tokenVisuals += TokenVisual ';')+
	'}'
;

TokenVisual:
	token=[Token|ID] colorSpec=STRING (bold?='bold')? (italic?='italic')?
;

LexicalPartitionHighlighting:
	LexicalPartitionHighlighting_Rule | LexicalPartitionHighlighting_JS
;

LexicalPartitionHighlighting_JS:
	'script' partition=[Partition|ID] scriptURI=STRING
;

LexicalPartitionHighlighting_Rule:
	'rule' partition=[Partition|ID] (whitespace=WhitespaceRule)? '{'
		tokenList+=Token+

	'}'
;

Token:
	default?='default'? name=ID ('{' scannerList+=Scanner+ '}')?
;

Scanner:
	Scanner_Keyword | Scanner_Rule
;

Scanner_Keyword:
	'keywords' '[' keywords+=Keyword (',' keywords+=Keyword)* ']' ( 'enabledif' enabledIf=ScannerCondition)?
;

Keyword:
	name=STRING ('since' version=STRING)?
;

Scanner_Rule:
	Scanner_SingleLineRule | Scanner_MultiLineRule | Scanner_CharacterRule | Scanner_JSRule | Scanner_PatternRule
;

Scanner_SingleLineRule:
	'single_line' startSeq=STRING ( 'pattern' startPattern=STRING startSuffix=STRING )? ( 'col' check=Check )? ('=>' endSeq=STRING?)? ('escaped' 'by' escapeSeq=STRING)? ( 'enabledif' enabledIf=ScannerCondition)?
;

Scanner_MultiLineRule:
	'multi_line' startSeq=STRING ( 'pattern' startPattern=STRING startSuffix=STRING )? ( 'col' check=Check )? '=>' endSeq=STRING ('escaped' 'by' escapeSeq=STRING)?  ( 'enabledif' enabledIf=ScannerCondition)?
;

Scanner_PatternRule:
	'pattern' startPattern=STRING (length=INT)?  ( 'col' check=Check )? 'containing' contentPattern=STRING  ( 'enabledif' enabledIf=ScannerCondition)?
;

Scanner_CharacterRule:
	'character' '[' characters+=STRING (',' characters+=STRING)* ']'  ( 'col' check=Check )?  ( 'enabledif' enabledIf=ScannerCondition)?
;

Scanner_JSRule:
	'script' fileURI=STRING ( 'col' check=Check )? ( 'enabledif' condition=ScannerCondition)?
;

ScannerCondition:
	ScannerConditionExists | ScannerConditionEquals | ScannerConditionJs | ScannerConditionComposite
;

ScannerConditionComposite:
	op=('and' | 'or') '('elements+=ScannerCondition')'
;


ScannerConditionExists:
	key=STRING 'exists'
;

ScannerConditionEquals:
	key=STRING 'eq' value=STRING
;

ScannerConditionJs:
	'script' value=STRING
;

Check:
	Range | Equals
;

Equals:
	'eq' value=INT
;

Range:
	'in' ltIncl=('('|'[') (minValue+=INT)? ',' (maxValue+=INT)? gtIncl=(')'|']')
;

WhitespaceRule:
	'whitespace' (('[' characters+=STRING (',' characters+=STRING )* ']') | javawhitespace?='javawhitespace' | fileURI=STRING)
;
