/*
 * generated by Xtext
 */
grammar InternalGModelDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.fx.ide.gmodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.fx.ide.gmodel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.fx.ide.gmodel.services.GModelDSLGrammarAccess;

}

@parser::members {

 	private GModelDSLGrammarAccess grammarAccess;
 	
    public InternalGModelDSLParser(TokenStream input, GModelDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "GModel";	
   	}
   	
   	@Override
   	protected GModelDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGModel
entryRuleGModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGModelRule()); }
	 iv_ruleGModel=ruleGModel 
	 { $current=$iv_ruleGModel.current; } 
	 EOF 
;

// Rule GModel
ruleGModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGModelAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGModelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGModelAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGModelAccess().getTypeListGDomainElementParserRuleCall_3_0()); 
	    }
		lv_typeList_3_0=ruleGDomainElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGModelRule());
	        }
       		add(
       			$current, 
       			"typeList",
        		lv_typeList_3_0, 
        		"GDomainElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGModelAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleGDomainElement
entryRuleGDomainElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGDomainElementRule()); }
	 iv_ruleGDomainElement=ruleGDomainElement 
	 { $current=$iv_ruleGDomainElement.current; } 
	 EOF 
;

// Rule GDomainElement
ruleGDomainElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGDomainElementAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGDomainElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGDomainElementAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainElementRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getGDomainElementAccess().getSuperTypeListGDomainElementCrossReference_2_1_0()); 
	}

)
)(	otherlv_4=', ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGDomainElementAccess().getCommaSpaceKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainElementRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getGDomainElementAccess().getSuperTypeListGDomainElementCrossReference_2_2_1_0()); 
	}

)
))*)?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGDomainElementAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGDomainElementAccess().getPropertyListGDomainPropertyParserRuleCall_4_0()); 
	    }
		lv_propertyList_7_0=ruleGDomainProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGDomainElementRule());
	        }
       		add(
       			$current, 
       			"propertyList",
        		lv_propertyList_7_0, 
        		"GDomainProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGDomainElementAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleGDomainProperty
entryRuleGDomainProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGDomainPropertyRule()); }
	 iv_ruleGDomainProperty=ruleGDomainProperty 
	 { $current=$iv_ruleGDomainProperty.current; } 
	 EOF 
;

// Rule GDomainProperty
ruleGDomainProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
(
		lv_builtIn_0_1=	'Int' 
    {
        newLeafNode(lv_builtIn_0_1, grammarAccess.getGDomainPropertyAccess().getBuiltInIntKeyword_0_0_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed($current, "builtIn", lv_builtIn_0_1, null);
	    }

    |		lv_builtIn_0_2=	'Double' 
    {
        newLeafNode(lv_builtIn_0_2, grammarAccess.getGDomainPropertyAccess().getBuiltInDoubleKeyword_0_0_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed($current, "builtIn", lv_builtIn_0_2, null);
	    }

    |		lv_builtIn_0_3=	'String' 
    {
        newLeafNode(lv_builtIn_0_3, grammarAccess.getGDomainPropertyAccess().getBuiltInStringKeyword_0_0_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed($current, "builtIn", lv_builtIn_0_3, null);
	    }

    |		lv_builtIn_0_4=	'Boolean' 
    {
        newLeafNode(lv_builtIn_0_4, grammarAccess.getGDomainPropertyAccess().getBuiltInBooleanKeyword_0_0_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed($current, "builtIn", lv_builtIn_0_4, null);
	    }

)

)
)(
(
		lv_list_1_0=	'[]' 
    {
        newLeafNode(lv_list_1_0, grammarAccess.getGDomainPropertyAccess().getListLeftSquareBracketRightSquareBracketKeyword_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed($current, "list", true, "[]");
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getGDomainPropertyAccess().getNameIDTerminalRuleCall_0_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGDomainPropertyAccess().getEqualsSignKeyword_0_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGDomainPropertyAccess().getDefaultValueGDefaultParserRuleCall_0_0_3_1_0()); 
	    }
		lv_defaultValue_4_0=ruleGDefault		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGDomainPropertyRule());
	        }
       		set(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_4_0, 
        		"GDefault");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getGDomainPropertyAccess().getRefGDomainElementCrossReference_0_1_0_0()); 
	}

)
)(
(
		lv_list_6_0=	'[]' 
    {
        newLeafNode(lv_list_6_0, grammarAccess.getGDomainPropertyAccess().getListLeftSquareBracketRightSquareBracketKeyword_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed($current, "list", true, "[]");
	    }

)
)?(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getGDomainPropertyAccess().getNameIDTerminalRuleCall_0_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDomainPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)))	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGDomainPropertyAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleGDefault
entryRuleGDefault returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGDefaultRule()); }
	 iv_ruleGDefault=ruleGDefault 
	 { $current=$iv_ruleGDefault.current; } 
	 EOF 
;

// Rule GDefault
ruleGDefault returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_stringVal_0_0=RULE_STRING
		{
			newLeafNode(lv_stringVal_0_0, grammarAccess.getGDefaultAccess().getStringValSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDefaultRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringVal",
        		lv_stringVal_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_intVal_1_0=RULE_INT
		{
			newLeafNode(lv_intVal_1_0, grammarAccess.getGDefaultAccess().getIntValINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDefaultRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intVal",
        		lv_intVal_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


