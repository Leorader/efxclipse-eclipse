






module org.eclipse.fx.ide.fxgraph.FXGraph

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/fx/ide/fxgraph/FXGraph.xtext"
var file.extensions = "fxgraph"
var projectName = "org.eclipse.fx.ide.fxgraph"
var runtimeProject = "../${projectName}"

Workflow {
	
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				//composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {
				generateStub = false
			}
			fragment = exporting.QualifiedNamesFragment {}
			
			// testing API
			fragment = junit.Junit4Fragment {}
			
			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment {
				useJdtRefactoring = true
			}

			// provides a compare view
			fragment = compare.CompareFragment {
				fileExtensions = file.extensions
			}

			// Xbase support
			fragment = types.TypesGeneratorFragment {}
			fragment = xbase.XbaseGeneratorFragment {}
			
			// Code generator
			fragment = generator.GeneratorFragment {
				generateMwe = true
				generateJavaMain = true
			}
			
			fragment = builder.BuilderIntegrationFragment {}
				
			fragment = templates.CodetemplatesGeneratorFragment {}
		}
	}
}
